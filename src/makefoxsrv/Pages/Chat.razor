@page "/chat"
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IHttpContextService HttpContextService

<style>
    .tab-container {
        display: flex;
        flex-direction: row;
        border-bottom: 1px solid #ccc;
        margin-bottom: 10px;
    }

    .tab {
        padding: 10px 15px;
        cursor: pointer;
        border: 1px solid #ccc;
        border-bottom: none;
        background-color: #f0f0f0;
        margin-right: 5px;
        display: flex;
        align-items: center;
        position: relative;
    }

        .tab.active {
            background-color: #ffffff;
            border-top: 2px solid #007bff;
            font-weight: bold;
        }

        .tab .close-button {
            margin-left: 10px;
            font-size: 12px;
            color: #999;
            cursor: pointer;
        }

            .tab .close-button:hover {
                color: #333;
            }

    .chat-window {
        height: 400px;
        overflow-y: auto;
        border: 1px solid #ccc;
        padding: 10px;
        margin-bottom: 20px;
        display: flex;
        flex-direction: column-reverse;
    }

    .message {
        margin-bottom: 10px;
    }

    .user-message {
        background-color: #d3f6db;
        padding: 5px 10px;
        border-radius: 10px;
        margin-right: 50%;
    }

    .csr-message {
        background-color: #f0f0f0;
        padding: 5px 10px;
        border-radius: 10px;
        margin-left: 50%;
    }

    .telegram-message {
        background-color: #e3f2fd;
        padding: 5px 10px;
        border-radius: 10px;
        margin-right: 50%;
    }

    .support-message {
        background-color: #ffebee;
        padding: 5px 10px;
        border-radius: 10px;
        margin-left: 50%;
    }

    .modal {
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }

    .modal-actions {
        display: flex;
        justify-content: flex-end;
    }

        .modal-actions button {
            margin-left: 10px;
        }
</style>

<nav class="tab-container">
    @foreach (var chat in Chats)
    {
        <div class="tab @(SelectedChat == chat ? "active" : "")" @onclick="() => SelectChat(chat)">
            @chat.User.Username
            <span class="close-button" @onclick="(e) => CloseChat(e, chat)">x</span>
        </div>
    }
    <div class="tab" @onclick="ShowNewChatModal">+</div>
</nav>

@if (SelectedChat != null)
{
    <div class="chat-window" @ref="chatWindowRef">
        @foreach (var message in SelectedChat.Messages.AsEnumerable().Reverse())
        {
            <div class="message">
                @if (message.Source == "telegram_log")
                {
                    <div class="telegram-message">
                        @((MarkupString)message.Text)
                        <span>@message.Date.ToString("yyyy-MM-dd HH:mm:ss")</span>
                    </div>
                }
                else if (message.Source == "support_chats")
                {
                    <div class="support-message">
                        @((MarkupString)message.Text)
                        <span>@message.Date.ToString("yyyy-MM-dd HH:mm:ss")</span>
                    </div>
                }
            </div>
        }
    </div>

    <input @bind="newMessageText" placeholder="Type a message" @onkeydown="HandleEnter" />
    <button @onclick="SendMessage">Send</button>
}

@if (isModalOpen)
{
    <div class="modal">
        <div class="modal-content">
            <h2>Start New Chat</h2>
            <input @bind="newChatUserInput" placeholder="Enter User UID or Username" />
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p style="color: red">@errorMessage</p>
            }
            <div class="modal-actions">
                <button @onclick="CloseModal">Cancel</button>
                <button @onclick="StartNewChatAsync">Start Chat</button>
            </div>
        </div>
    </div>
}

@code {
    private int SelectedIndex;
    private List<ChatInstance> Chats = new List<ChatInstance>();
    private ChatInstance SelectedChat;
    private bool isModalOpen;
    private string newChatUserInput;
    private string errorMessage;
    private string newMessageText;
    private FoxUser currentUser;
    private ElementReference chatWindowRef;
    private HubConnection HubConnection;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync started.");

        try
        {
            var httpContext = HttpContextService.GetCurrentHttpContext();
            if (httpContext == null)
            {
                Console.WriteLine("HttpContext is null. Redirecting to login.");
                NavigationManager.NavigateTo("/login");
                return;
            }

            var userSession = httpContext.Session.GetString("UserSession");
            Console.WriteLine($"User session: {userSession}");

            if (string.IsNullOrEmpty(userSession))
            {
                Console.WriteLine("User session is null or empty. Redirecting to login.");
                NavigationManager.NavigateTo("/login");
                return;
            }

            currentUser = await FoxUser.GetByUID(long.Parse(userSession));
            Console.WriteLine($"Current user: {currentUser?.Username}");

            if (currentUser == null || currentUser.GetAccessLevel() != AccessLevel.ADMIN)
            {
                Console.WriteLine("Current user is null or not admin. Redirecting to login.");
                NavigationManager.NavigateTo("/login");
                return;
            }

            Console.WriteLine("Fetching open chats...");
            Chats = await DatabaseHandler.GetOpenChatsAsync();
            Console.WriteLine($"Number of open chats: {Chats.Count}");

            var hubUrl = NavigationManager.ToAbsoluteUri("http://localhost:5555/chathub");


            Console.WriteLine($"Hub URL: {hubUrl}");

            HubConnection = new HubConnectionBuilder()
                .WithUrl(hubUrl)
                .Build();

            HubConnection.On<string, string, string>("ReceiveTelegramMessage", async (user, message, date) =>
            {
                var chat = Chats.FirstOrDefault(c => c.User.Username == user);
                if (chat != null)
                {
                    chat.Messages.Add(new ChatMessage
                        {
                            User = chat.User,
                            Text = $"<p>{message}</p>",
                            Date = DateTime.Parse(date),
                            Source = "telegram_log"
                        });
                    await InvokeAsync(() =>
                    {
                        StateHasChanged();
                        ScrollToBottom();
                    });
                }
            });

            Console.WriteLine("Starting Hub connection...");
            await HubConnection.StartAsync();
            Console.WriteLine("Hub connection started.");

            if (Chats.Count > 0)
            {
                SelectChat(Chats[0]);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during initialization: {ex.Message}\r\n{ex.StackTrace}");
        }

        Console.WriteLine("OnInitializedAsync completed.");
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(newMessageText))
        {
            var csrUser = currentUser; // Current user is the CSR sending the message
            var newMessage = new ChatMessage
                {
                    User = csrUser,
                    Text = newMessageText,
                    Date = DateTime.Now,
                    Source = "support_chats"
                };
            SelectedChat.Messages.Add(newMessage);
            await DatabaseHandler.SaveMessageAsync(SelectedChat.User, csrUser, 0, newMessageText);

            // Send message to Telegram
            if (SelectedChat.User?.TelegramID is not null)
            {
                var teleUser = await FoxTelegram.GetUserFromID(SelectedChat.User.TelegramID.Value);
                if (teleUser is not null)
                {
                    var t = new FoxTelegram(teleUser, null);
                    await t.SendMessageAsync(newMessageText);
                }
            }

            newMessageText = string.Empty;
            await ScrollToBottom();
            StateHasChanged();
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", chatWindowRef);
    }

    private void ShowNewChatModal()
    {
        isModalOpen = true;
    }

    private void CloseModal()
    {
        isModalOpen = false;
        newChatUserInput = null;
        errorMessage = null;
    }

    private async Task StartNewChatAsync()
    {
        var newUser = await FoxUser.ParseUser(newChatUserInput);
        if (newUser == null)
        {
            errorMessage = "User not found. Please enter a valid UID or username.";
            return;
        }
        var newChat = new ChatInstance { User = newUser, Messages = new List<ChatMessage>() };
        Chats.Add(newChat);
        await DatabaseHandler.AddOpenChatAsync(newUser, newUser.TelegramID.Value);
        await SelectAndFetchChat(newChat); // Ensure chat is selected after adding and messages are fetched
        CloseModal();
    }

    private async Task SelectAndFetchChat(ChatInstance chat)
    {
        SelectedChat = chat;
        StateHasChanged();

        var telegramMessages = await DatabaseHandler.FetchMessagesFromTelegramLog(chat.User.TelegramID.Value);
        var supportMessages = await DatabaseHandler.FetchMessagesFromSupportChats((long)chat.User.UID);

        chat.Messages = telegramMessages.Concat(supportMessages)
                                        .OrderBy(m => m.Date)
                                        .ToList();

        StateHasChanged();
        await ScrollToBottom();
    }

    private void SelectChat(ChatInstance chat)
    {
        SelectedChat = chat;
        StateHasChanged();
    }

    private async Task CloseChat(MouseEventArgs e, ChatInstance chat)
    {
        //e.StopPropagation();
        Chats.Remove(chat);
        await DatabaseHandler.RemoveOpenChatAsync(chat.User);
        if (Chats.Count > 0)
        {
            SelectChat(Chats[0]);
        }
        else
        {
            SelectedChat = null;
        }
        StateHasChanged();
    }

    private async Task HandleEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }
}

<script>
    window.scrollToBottom = (element) => {
        element.scrollTop = element.scrollHeight;
    }
</script>
