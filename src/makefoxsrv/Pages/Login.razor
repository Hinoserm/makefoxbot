@page "/login"
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject ILogger<Login> Logger
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<h3>Login</h3>

<div id="telegram-login-widget"></div>

<script async src="https://telegram.org/js/telegram-widget.js?7" data-telegram-login="@FoxMain.settings.TelegramBotUsername" data-size="large" data-auth-url="@Navigation.ToAbsoluteUri("/api/auth/telegram")" data-request-access="write"></script>

@if (!string.IsNullOrEmpty(LoginError))
{
    <p style="color: red">@LoginError</p>
}

@code {
    private string LoginError;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync started.");

        try
        {
            var httpContext = HttpContextAccessor.HttpContext;
            if (httpContext == null)
            {
                Logger.LogError("HttpContext is null in OnInitializedAsync.");
                await Task.Yield(); // Ensure async context is maintained
                return;
            }

            var userSession = httpContext.Session.GetString("UserSession");
            Logger.LogInformation($"User session: {userSession}");

            if (string.IsNullOrEmpty(userSession))
            {
                Logger.LogInformation("No user session found.");
            }
            else
            {
                Logger.LogInformation($"User session found: {userSession}");
                await InvokeAsync(() => Navigation.NavigateTo("/chat"));
            }

            var cookies = httpContext.Request.Cookies;
            foreach (var cookie in cookies)
            {
                Logger.LogInformation($"Cookie: {cookie.Key} = {cookie.Value}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error in OnInitializedAsync: {ex.Message}");
        }

        Logger.LogInformation("OnInitializedAsync completed.");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Add any necessary cleanup code here
        }
    }

    public void Dispose()
    {
        // Remove the widget when the component is disposed
        JSRuntime.InvokeVoidAsync("removeTelegramWidget");
    }
}
