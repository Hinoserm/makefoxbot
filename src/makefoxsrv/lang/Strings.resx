<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Lang.AnswerCallbackMsg" xml:space="preserve">
    <value>Language set!</value>
  </data>
  <data name="Terms.AgreeButton" xml:space="preserve">
    <value>📝 I Understand &amp; Agree</value>
    <comment>Button shown when the user needs to agree to the terms of service to continue.</comment>
  </data>
  <data name="Terms.AgreeClicked" xml:space="preserve">
    <value>You have acknolwedged your acceptance of the terms of service.

Thank you!</value>
  </data>
  <data name="Terms.AgreePrompt" xml:space="preserve">
    <value>&lt;b&gt;Click the button below to acknowledge your understanding and agreement with these terms.&lt;/b&gt;</value>
  </data>
  <data name="Terms.Message" xml:space="preserve">
    <value>Before you may continue, you must review and agree to the following terms of service:

&lt;b&gt;Age Verification:&lt;/b&gt; You must be at least 18 years old and recognized as a legal adult in your jurisdiction.

&lt;b&gt;Character Guidelines:&lt;/b&gt; We discourage the depiction of realistic human characters that could be mistaken for real people.  It is explicitly forbidden to create images of underage human characters of any sort.

&lt;b&gt;Copyright Compliance:&lt;/b&gt; Creation of images using copyrighted characters or trademarks without authorization is prohibited.

&lt;b&gt;Legal Compliance:&lt;/b&gt; Ensure that all content generated abides by the laws and regulations of your locality.

Failure to comply with these rules may result in account warnings or restrictions.</value>
    <comment>Message shown when the user has not agreed to the terms of service.</comment>
  </data>
  <data name="Terms.PrivacyPolicy" xml:space="preserve">
    <value>&lt;b&gt;Privacy Policy&lt;/b&gt;
We collect and store all images sent or created using the bot, as well as your Telegram username, first name, last name, Telegram ID, and any other information generated through normal use of the service. We do not sell or share your information with any third parties. Your data is used solely to enhance and provide our services.

We will comply with all legally required requests to remove your personal information.  Please contact us via email at privacy@makefox.group</value>
  </data>
  <data name="Terms.UserAgreed" xml:space="preserve">
    <value>&lt;b&gt;You have acknowleged your acceptance of these terms.  Thank you!&lt;/b&gt;</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Hello! I’m Makefoxbot, excited to help you unleash your creativity with fantastic furry, anime, or cartoon images through AI.

&lt;b&gt;Getting Started:&lt;/b&gt; Before diving in, a quick look over the /help documentation will set you up with the basics. Ready to explore? Let's cover some ground rules:

&lt;b&gt;Legal Bits:&lt;/b&gt;

&lt;b&gt;Age Verification:&lt;/b&gt; You must be at least 18 years old and recognized as a legal adult in your jurisdiction.
&lt;b&gt;Character Guidelines:&lt;/b&gt; We discourage depicting human characters in mature content, and it's explicitly forbidden to create images of underage human characters in such contexts.
&lt;b&gt;Copyright Compliance:&lt;/b&gt; Using copyrighted characters or trademarks without authorization is off-limits.
&lt;b&gt;Legal Compliance:&lt;/b&gt; All content must comply with U.S. laws and the regulations of your locality.

&lt;b&gt;Purpose &amp;amp; Use:&lt;/b&gt;

&lt;b&gt;For Learning:&lt;/b&gt; This bot is intended for research and educational purposes, aiding personal growth and creative exploration.
&lt;b&gt;Quality Disclaimer:&lt;/b&gt; The unpredictable nature of AI means outputs might sometimes be harmful, incorrect, or offensive. Responsibility for the use and distribution of generated content rests with you.
&lt;b&gt;No Commercial Use:&lt;/b&gt; Artwork created here is not for sale. Let's keep our creations in the realm of personal use and enjoyment.
&lt;b&gt;Your Responsibility:&lt;/b&gt; Adhering to these guidelines ensures a safe and creative environment for everyone. Ignoring them could lead to warnings or restrictions on your account.</value>
    <comment>Default first message when user types /start.</comment>
  </data>
</root>